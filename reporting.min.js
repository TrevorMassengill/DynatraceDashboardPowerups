function openReportGenerator(){let $repgen=$("<div>").html(`\n        <div id="PowerupReportGeneratorTitleBar"><h3>Generate Report</h3></div>\n        <div id="PowerupReportGeneratorPreview">\n            <div id="PowerupReportGeneratorPreviewTitle"></div>\n            <div id="PowerupReportGeneratorPreviewContent"></div>\n        </div>\n        <div id="PowerupReportGeneratorButtonBar"></div>\n        `).addClass("PowerupReportGenerator").appendTo("body");let $buttonBar=$repgen.find(`#PowerupReportGeneratorButtonBar`);let $cancel=$(`<button type="button">`).on("click",closeReportGenerator).text("Cancel").addClass("powerupButton").appendTo($buttonBar);let $generate=$(`<button type="button" id="generateReportButton">`).on("click",generateReport).text("Generate").addClass("powerupButton").appendTo($buttonBar)}function closeReportGenerator(){$("div.PowerupReportGenerator").remove()}function generateReport(){$(`#generateReportButton`).hide();let $previewContent=$(`#PowerupReportGeneratorPreviewContent`);let $previewTitle=$(`#PowerupReportGeneratorPreviewTitle`);let $buttonBar=$(`#PowerupReportGeneratorButtonBar`);(function(H){let getSVG=function(charts,options,callback){const space=10;let svgArr=[],top=0,width=0,addSVG=function(svgres,i){let svgWidth=+svgres.match(/^<svg[^>]*width\s*=\s*\"?(\d+)\"?[^>]*>/)[1],svgHeight=+svgres.match(/^<svg[^>]*height\s*=\s*\"?(\d+)\"?[^>]*>/)[1],svg=svgres.replace("<svg",'<g transform="translate(0,'+top+')" ');svg=svg.replace("</svg>","</g>");top+=svgHeight+(i+1===charts.length?0:space);width=Math.max(width,svgWidth);svgArr.push(svg)},previewSVG=function(svg,i){let p=$.Deferred();$previewTitle.text(`Chart ${i}:`);$previewContent.html(svg);let $next=$(`<button type="button" id="generateReportNextButton">`).on("click",(e=>{$previewTitle.text(``);$previewContent.html();$self=$(e.target).remove();p.resolve()})).text("Next").addClass("powerupButton").appendTo($buttonBar);return p},exportChart=function(i){if(i===charts.length){return callback('<svg height="'+top+'" width="'+width+'" version="1.1" xmlns="http://www.w3.org/2000/svg">'+svgArr.join("")+"</svg>")}let chartOptions={chart:{borderColor:"#e6e6e6",borderWidth:"1px"}};let $chart=$(charts[i].container);let $tile=$chart.parents(DashboardPowerups.SELECTORS.TILE_SELECTOR);let $title=$tile.find(DashboardPowerups.SELECTORS.TITLE_SELECTOR);let title=$title.text();let idx=title.length;idx=DashboardPowerups.MARKERS.reduce(((acc,marker)=>title.includes(marker)?Math.min(title.indexOf(marker),acc):Math.min(acc,idx)),idx);title=title.substring(0,idx);if(typeof title!="undefined"&&title.length)chartOptions.title={text:title,align:"left",style:{color:"#454646",fontSize:"12px"}};charts[i].getSVGForLocalExport(options,chartOptions,(function(){console.log("Failed to get SVG")}),(async function(svg){await previewSVG(svg,i);addSVG(svg,i);return exportChart(i+1)}))};exportChart(0)};let exportCharts=function(charts,options){options=Highcharts.merge(Highcharts.getOptions().exporting,options);getSVG(charts,options,(function(svg){Highcharts.downloadSVGLocal(svg,options,(function(){console.log("Failed to export on client side")}))}))};Highcharts.setOptions({exporting:{fallbackToExportServer:false}});let charts=H.charts.filter((x=>typeof x!="undefined"));exportCharts(charts,{type:"application/pdf",libURL:DashboardPowerups.POWERUP_EXT_URL+"3rdParty/Highcharts/lib"})})(Highcharts)}
//# sourceMappingURL=file:///Users/lucas.hocker/Projects/DynatraceDashboardPowerup/reporting.min.js.map