import { InitCallback, OpenKit, Session, ShutdownCallback } from '../../api';
import { BeaconSenderImpl } from '../beacon/BeaconSender';
import { BeaconCacheImpl } from '../beacon/strategies/BeaconCache';
import { Configuration } from '../config/Configuration';
/**
 * Implementation of the {@link OpenKit} interface.
 */
export declare class OpenKitImpl implements OpenKit {
    private readonly config;
    private readonly initCallbackHolder;
    private readonly sessionIdProvider;
    private readonly beaconSender;
    private readonly logger;
    private readonly applicationWidePrefix;
    private readonly sessionConfig;
    private readonly cache;
    private initialized;
    private isShutdown;
    /**
     * Creates a new OpenKit instance with a copy of the configuration.
     *
     * @param config The app configuration.
     */
    constructor(config: Configuration);
    /**
     * Starts initialization of the OpenKit instance.
     * If an invalid response is sent back, we shutdown.
     */
    initialize(): Promise<void>;
    /**
     * @inheritDoc
     */
    shutdown(callback?: ShutdownCallback): void;
    /**
     * @inheritDoc
     */
    createSession(clientIP?: string): Session;
    isInitialized(): boolean;
    waitForInit(callback: InitCallback, timeout?: number): void;
    notifyInitialized(successfully: boolean): void;
    _isShutdown(): boolean;
    _getBeaconSender(): BeaconSenderImpl;
    _getPayloadCache(): BeaconCacheImpl;
    private createSessionId;
}
//# sourceMappingURL=OpenKitImpl.d.ts.map