"use strict";
/*
 * Copyright 2019 Dynatrace LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenKitBuilder = void 0;
const api_1 = require("./api");
const ImmediateSendingStrategy_1 = require("./core/beacon/strategies/ImmediateSendingStrategy");
const IntervalSendingStrategy_1 = require("./core/beacon/strategies/IntervalSendingStrategy");
const AxiosHttpClient_1 = require("./core/communication/http/AxiosHttpClient");
const HttpCommunicationChannel_1 = require("./core/communication/http/state/HttpCommunicationChannel");
const OpenKitImpl_1 = require("./core/impl/OpenKitImpl");
const ConsoleLoggerFactory_1 = require("./core/logging/ConsoleLoggerFactory");
const DefaultRandomNumberProvider_1 = require("./core/provider/DefaultRandomNumberProvider");
const Utils_1 = require("./core/utils/Utils");
const defaultDataCollectionLevel = 2 /* UserBehavior */;
const defaultCrashReportingLevel = 2 /* OptInCrashes */;
const defaultOperatingSystem = 'OpenKit';
const defaultApplicationName = '';
const validDeviceIdPattern = /^-?\d{1,19}$/;
/**
 * Builder for an OpenKit instance.
 */
class OpenKitBuilder {
    /**
     * Creates a new OpenKitBuilder
     *
     * @param beaconURL The url to the beacon endpoint
     * @param applicationId The id of the custom application
     * @param deviceId The id of the current device, which must be a number between 1 and 19 digits inclusive.
     */
    constructor(beaconURL, applicationId, deviceId) {
        this.applicationName = defaultApplicationName;
        this.operatingSystem = defaultOperatingSystem;
        this.crashReportingLevel = defaultCrashReportingLevel;
        this.dataCollectionLevel = defaultDataCollectionLevel;
        this.logLevel = api_1.LogLevel.Warn;
        this.beaconUrl = beaconURL;
        this.applicationId = applicationId;
        this.deviceId = String(deviceId);
    }
    /**
     * Sets the application name.
     * Defaults to <code>''</code> <i>(empty string)</i>
     *
     * @param appName The application name.
     * @returns The current OpenKitBuilder
     */
    withApplicationName(appName) {
        this.applicationName = String(appName);
        return this;
    }
    /**
     * Sets the operating system information. Defaults to 'OpenKit'.
     *
     * @param operatingSystem The operating system
     * @returns The current OpenKitBuilder
     */
    withOperatingSystem(operatingSystem) {
        this.operatingSystem = String(operatingSystem);
        return this;
    }
    /**
     * Defines the version of the application.
     *
     * @param appVersion The application version
     * @returns The current OpenKitBuilder
     */
    withApplicationVersion(appVersion) {
        this.applicationVersion = String(appVersion);
        return this;
    }
    /**
     * Sets the data collection level.
     *
     * Depending on the chosen level the amount and granularity of data sent is controlled.
     * Off (0) - no data collected
     * Performance (1) - only performance related data is collected
     * UserBehavior (2) - all available RUM data including performance related data is collected..
     *
     * If an invalid value is passed, it is ignored.
     *
     * Default value is UserBehavior (2)
     *
     * @param dataCollectionLevel The data collection level
     * @returns The current OpenKitBuilder
     */
    withDataCollectionLevel(dataCollectionLevel) {
        if (typeof dataCollectionLevel === 'number' &&
            dataCollectionLevel >= 0 &&
            dataCollectionLevel <= 2) {
            this.dataCollectionLevel = dataCollectionLevel;
        }
        return this;
    }
    /**
     * Sets the flag if crash reporting is enabled
     *
     * <p>
     * Off (0) - No crashes are reported
     * OptOutCrashes = (1) - No crashes are reported
     * OptInCrashes = (2) - Crashes are reported
     * </p>
     *
     * If an invalid value is passed, it is ignored.
     *
     * @param crashReportingLevel
     */
    withCrashReportingLevel(crashReportingLevel) {
        if (typeof crashReportingLevel === 'number' &&
            crashReportingLevel >= 0 &&
            crashReportingLevel <= 2) {
            this.crashReportingLevel = crashReportingLevel;
        }
        return this;
    }
    /**
     * Sets the communication channel. If the object is null or undefined, it is ignored.
     *
     * @param communicationChannel
     */
    withCommunicationChannel(communicationChannel) {
        if (communicationChannel !== null &&
            communicationChannel !== undefined) {
            this.communicationChannel = communicationChannel;
        }
        return this;
    }
    /**
     * Sets the random number provider. If the object is null or undefined, it is ignored.
     *
     * @param random The random number provider.
     */
    withRandomNumberProvider(random) {
        if (random !== null && random !== undefined) {
            this.randomNumberProvider = random;
        }
        return this;
    }
    /**
     * Sets the manufacturer of the device. If the argument is not a string or empty string, it is ignored.
     *
     * @param manufacturer The manufacturer of the device
     */
    withManufacturer(manufacturer) {
        if (typeof manufacturer === 'string' && manufacturer.length !== 0) {
            this.manufacturer = Utils_1.truncate(manufacturer);
        }
        return this;
    }
    /**
     * Sets the modelId of the device. If the argument is not a string or empty string, it is ignored.
     *
     * @param modelId The model id of the device
     */
    withModelId(modelId) {
        if (typeof modelId === 'string' && modelId.length !== 0) {
            this.modelId = Utils_1.truncate(modelId);
        }
        return this;
    }
    /**
     * Sets the user language. If the language is not a string or empty string, it is ignored.
     * Currently, there are no restrictions on RFC/ISO codes.
     *
     * @param language The user language
     */
    withUserLanguage(language) {
        if (typeof language === 'string' && language.length !== 0) {
            this.userLanguage = language;
        }
        return this;
    }
    /**
     * Sets the screen resolution. If the width or height are not positive finite numbers, both are ignored.
     *
     * @param width The width of the screen
     * @param height The height of the screen
     */
    withScreenResolution(width, height) {
        // Check input for valid numbers
        const w = parseInt(width, 10);
        const h = parseInt(height, 10);
        if (Utils_1.isFinite(w) && Utils_1.isFinite(h) && w > 0 && h > 0) {
            this.screenWidth = w;
            this.screenHeight = h;
        }
        return this;
    }
    /**
     * Sets the screen orientation. Allowed values are Orientation.Portrait ('p') and Orientation.Landscape ('l').
     * All other values are ignored.
     *
     * @param orientation The orientation. 'p' || 'l'.
     */
    withScreenOrientation(orientation) {
        if (orientation === "l" /* Landscape */ ||
            orientation === "p" /* Portrait */) {
            this.orientation = orientation;
        }
        return this;
    }
    /**
     * Sets the logger factory.
     * If the argument is null or undefined, it is ignored.
     *
     * @param loggerFactory
     */
    withLoggerFactory(loggerFactory) {
        if (loggerFactory !== null && loggerFactory !== undefined) {
            this.loggerFactory = loggerFactory;
        }
        return this;
    }
    /**
     * Sets the default log level if the default logger factory is used.
     *
     * @param logLevel The loglevel for the default logger factory.
     */
    withLogLevel(logLevel) {
        this.logLevel = Number(logLevel);
        return this;
    }
    /**
     * Builds and gets the current configuration.
     *
     * @returns the current configuration
     */
    getConfig() {
        return this.buildConfig();
    }
    /**
     * Build and initialize an OpenKit instance.
     *
     * @returns The OpenKit instance.
     */
    build() {
        const config = this.buildConfig();
        const openKit = new OpenKitImpl_1.OpenKitImpl(config);
        openKit.initialize();
        return openKit;
    }
    buildConfig() {
        const loggerFactory = this.loggerFactory || new ConsoleLoggerFactory_1.ConsoleLoggerFactory(this.logLevel);
        const communicationChannel = this.communicationChannel ||
            new HttpCommunicationChannel_1.HttpCommunicationChannel(new AxiosHttpClient_1.AxiosHttpClient(loggerFactory), loggerFactory);
        const random = this.randomNumberProvider || new DefaultRandomNumberProvider_1.DefaultRandomNumberProvider();
        // user does not allow data tracking
        const deviceId = normalizeDeviceId(this.deviceId, this.dataCollectionLevel, random);
        const sendingStrategies = getContextBasedSendingStrategies();
        return {
            openKit: {
                beaconURL: this.beaconUrl,
                deviceId,
                applicationId: this.applicationId,
                communicationChannel,
                random,
                loggerFactory,
                sendingStrategies,
            },
            privacy: {
                dataCollectionLevel: this.dataCollectionLevel,
                crashReportingLevel: this.crashReportingLevel,
            },
            meta: {
                applicationName: this.applicationName,
                applicationVersion: this.applicationVersion,
                operatingSystem: this.operatingSystem,
            },
            device: {
                manufacturer: this.manufacturer,
                modelId: this.modelId,
                userLanguage: this.userLanguage,
                screenWidth: this.screenWidth,
                screenHeight: this.screenHeight,
                orientation: this.orientation,
            },
        };
    }
}
exports.OpenKitBuilder = OpenKitBuilder;
const normalizeDeviceId = (deviceId, dcl, random) => {
    // Check if we may capture the device id
    let id = dcl !== 2 /* UserBehavior */
        ? String(random.nextPositiveInteger())
        : deviceId;
    // remove a possible '+' at the start
    if (id.charAt(0) === '+') {
        id = id.substr(1);
    }
    if (!validDeviceIdPattern.test(id)) {
        id = String(random.nextPositiveInteger());
    }
    return id;
};
const isNodeJs = () => typeof process !== 'undefined' &&
    process.release &&
    process.release.name === 'node';
const getContextBasedSendingStrategies = () => {
    if (isNodeJs()) {
        return [new IntervalSendingStrategy_1.IntervalSendingStrategy()];
    }
    else {
        return [new ImmediateSendingStrategy_1.ImmediateSendingStrategy()];
    }
};
//# sourceMappingURL=OpenKitBuilder.js.map