"use strict";
/*
 * Copyright 2019 Dynatrace LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticPayloadBuilder = void 0;
const PlatformConstants_1 = require("../PlatformConstants");
const Payload_1 = require("./Payload");
const PayloadQueryBuilder_1 = require("./PayloadQueryBuilder");
/**
 * Maximum size of a stacktrace passed to Dynatrace.
 */
const MAX_STACKTRACE_LENGTH = 128000;
class StaticPayloadBuilder {
    static reportCrash(errorName, reason, stacktrace, sequenceNumber, timeSinceSessionStart) {
        return StaticPayloadBuilder.basicEventData(50 /* Crash */, errorName)
            .add("pa" /* ParentActionId */, 0)
            .add("s0" /* StartSequenceNumber */, sequenceNumber)
            .add("t0" /* Time0 */, timeSinceSessionStart)
            .add("rs" /* Reason */, reason)
            .add("st" /* Stacktrace */, stacktrace, MAX_STACKTRACE_LENGTH)
            .add("tt" /* ErrorTechnologyType */, PlatformConstants_1.errorTechnologyType)
            .build();
    }
    static startSession(sequenceNumber) {
        return StaticPayloadBuilder.basicEventData(18 /* SessionStart */)
            .add("pa" /* ParentActionId */, 0)
            .add("s0" /* StartSequenceNumber */, sequenceNumber)
            .add("t0" /* Time0 */, 0)
            .build();
    }
    static endSession(sequenceNumber, duration) {
        return StaticPayloadBuilder.basicEventData(19 /* SessionEnd */)
            .add("pa" /* ParentActionId */, 0)
            .add("s0" /* StartSequenceNumber */, sequenceNumber)
            .add("t0" /* Time0 */, duration)
            .build();
    }
    static action(name, actionId, startSequenceNumber, endSequenceNumber, timeSinceSessionStart, duration) {
        return StaticPayloadBuilder.basicEventData(1 /* ManualAction */, name)
            .add("ca" /* ActionId */, actionId)
            .add("pa" /* ParentActionId */, 0)
            .add("s0" /* StartSequenceNumber */, startSequenceNumber)
            .add("s1" /* EndSequenceNumber */, endSequenceNumber)
            .add("t0" /* Time0 */, timeSinceSessionStart)
            .add("t1" /* Time1 */, duration)
            .build();
    }
    static reportNamedEvent(name, parentActionId, startSequenceNumber, timeSinceSessionStart) {
        return StaticPayloadBuilder.basicEventData(10 /* NamedEvent */, name)
            .add("pa" /* ParentActionId */, parentActionId)
            .add("s0" /* StartSequenceNumber */, startSequenceNumber)
            .add("t0" /* Time0 */, timeSinceSessionStart)
            .build();
    }
    static applicationWidePrefix(config) {
        const { openKit, device, privacy, meta } = config;
        return new PayloadQueryBuilder_1.PayloadQueryBuilder()
            .add("vv" /* ProtocolVersion */, PlatformConstants_1.protocolVersion)
            .add("va" /* OpenKitVersion */, PlatformConstants_1.openKitVersion)
            .add("ap" /* ApplicationId */, openKit.applicationId)
            .add("an" /* ApplicationName */, meta.applicationName === undefined ? '' : meta.applicationName)
            .addIfDefined("vn" /* ApplicationVersion */, meta.applicationVersion)
            .addIfDefined("os" /* DeviceOs */, meta.operatingSystem)
            .add("pt" /* PlatformType */, PlatformConstants_1.platformTypeOpenKit)
            .add("tt" /* AgentTechnologyType */, PlatformConstants_1.agentTechnologyType)
            .add("vi" /* VisitorId */, openKit.deviceId)
            .add("dl" /* DataCollectionLevel */, privacy.dataCollectionLevel)
            .add("cl" /* CrashReportingLevel */, privacy.crashReportingLevel)
            .addIfDefined("mf" /* DeviceManufacturer */, device.manufacturer)
            .addIfDefined("md" /* DeviceModel */, device.modelId)
            .addIfDefined("sw" /* ScreenWidth */, device.screenWidth)
            .addIfDefined("sh" /* ScreenHeight */, device.screenHeight)
            .addIfDefined("ul" /* UserLanguage */, device.userLanguage)
            .addIfDefined("so" /* Orientation */, device.orientation)
            .build();
    }
    static sessionPrefix(prefix, sessionId, clientIpAddress, sessionStartTime) {
        const sessionPrefix = new PayloadQueryBuilder_1.PayloadQueryBuilder()
            .add("sn" /* SessionNumber */, sessionId)
            .add("ip" /* ClientIpAddress */, clientIpAddress)
            .add("tv" /* SessionStartTime */, sessionStartTime)
            .build();
        return Payload_1.combinePayloads(prefix, sessionPrefix);
    }
    static mutable(multiplicity, transmissionTime) {
        return new PayloadQueryBuilder_1.PayloadQueryBuilder()
            .add("mp" /* Multiplicity */, multiplicity)
            .add("tx" /* TransmissionTime */, transmissionTime)
            .build();
    }
    static reportValue(actionId, name, value, sequenceNumber, timeSinceSessionStart) {
        const eventType = typeof value === 'number'
            ? 13 /* ValueDouble */
            : 11 /* ValueString */;
        return StaticPayloadBuilder.basicEventData(eventType, name)
            .add("pa" /* ParentActionId */, actionId)
            .add("s0" /* StartSequenceNumber */, sequenceNumber)
            .add("t0" /* Time0 */, timeSinceSessionStart)
            .addIfDefinedAndNotNull("vl" /* Value */, value)
            .build();
    }
    static reportError(name, parentActionId, startSequenceNumber, timeSinceSessionStart, reason, errorValue) {
        return StaticPayloadBuilder.basicEventData(40 /* Error */, name)
            .add("pa" /* ParentActionId */, parentActionId)
            .add("s0" /* StartSequenceNumber */, startSequenceNumber)
            .add("t0" /* Time0 */, timeSinceSessionStart)
            .add("rs" /* Reason */, reason)
            .add("ev" /* ErrorValue */, errorValue)
            .add("tt" /* ErrorTechnologyType */, PlatformConstants_1.errorTechnologyType)
            .build();
    }
    static identifyUser(userTag, sequenceNumber, timeSinceSessionStart) {
        return StaticPayloadBuilder.basicEventData(60 /* IdentifyUser */, userTag)
            .add("pa" /* ParentActionId */, 0)
            .add("s0" /* StartSequenceNumber */, sequenceNumber)
            .add("t0" /* Time0 */, timeSinceSessionStart)
            .build();
    }
    static webRequest(url, parentActionId, startSequenceNumber, timeSinceSessionStart, endSequenceNumber, duration, bytesSent, bytesReceived, responseCode) {
        return StaticPayloadBuilder.basicEventData(30 /* WebRequest */, url)
            .add("pa" /* ParentActionId */, parentActionId)
            .add("s0" /* StartSequenceNumber */, startSequenceNumber)
            .add("t0" /* Time0 */, timeSinceSessionStart)
            .add("s1" /* EndSequenceNumber */, endSequenceNumber)
            .add("t1" /* Time1 */, duration)
            .addIfNotNegative("bs" /* BytesSent */, bytesSent)
            .addIfNotNegative("br" /* BytesReceived */, bytesReceived)
            .addIfNotNegative("rc" /* ResponseCode */, responseCode)
            .build();
    }
    static basicEventData(eventType, name) {
        return new PayloadQueryBuilder_1.PayloadQueryBuilder()
            .add("et" /* EventType */, eventType)
            .addIfDefined("na" /* KeyName */, name)
            .add("it" /* ThreadId */, 1);
    }
}
exports.StaticPayloadBuilder = StaticPayloadBuilder;
//# sourceMappingURL=StaticPayloadBuilder.js.map