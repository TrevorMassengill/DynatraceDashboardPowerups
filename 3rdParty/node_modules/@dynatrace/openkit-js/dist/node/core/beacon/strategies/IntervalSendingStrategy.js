"use strict";
/*
 * Copyright 2019 Dynatrace LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntervalSendingStrategy = void 0;
const Utils_1 = require("../../utils/Utils");
const FlushLeftoversStrategy_1 = require("./FlushLeftoversStrategy");
const defaultLoopTimeout = 1000;
class IntervalSendingStrategy extends FlushLeftoversStrategy_1.FlushLeftoversStrategy {
    constructor(loopTimeout = defaultLoopTimeout) {
        super();
        this.loopTimeout = loopTimeout;
        this.isShutdown = false;
    }
    afterInit() {
        this.loop();
    }
    loop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.sender) {
                return;
            }
            while (!this.isShutdown) {
                this.flush();
                yield Utils_1.timeout(this.loopTimeout);
            }
        });
    }
    shutdown() {
        this.isShutdown = true;
        return super.shutdown();
    }
}
exports.IntervalSendingStrategy = IntervalSendingStrategy;
//# sourceMappingURL=IntervalSendingStrategy.js.map