"use strict";
/*
 * Copyright 2019 Dynatrace LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImmediateSendingStrategy = void 0;
const Payload_1 = require("../../payload/Payload");
const FlushLeftoversStrategy_1 = require("./FlushLeftoversStrategy");
const defaultFlushEventTypes = [
    50 /* Crash */,
    40 /* Error */,
    1 /* ManualAction */,
    60 /* IdentifyUser */,
    18 /* SessionStart */,
    19 /* SessionEnd */,
    30 /* WebRequest */,
];
class ImmediateSendingStrategy extends FlushLeftoversStrategy_1.FlushLeftoversStrategy {
    constructor(flushEventTypes = defaultFlushEventTypes) {
        super();
        this.flushEventTypes = flushEventTypes;
    }
    afterInit() {
        this.flush();
    }
    added(payload) {
        if (!this.sender) {
            return;
        }
        const et = Payload_1.getEventType(payload);
        if (et !== undefined && this.shouldFlush(et)) {
            this.flush();
        }
    }
    entryAdded(entry) {
        entry.builder.register(this);
    }
    shouldFlush(eventType) {
        return this.flushEventTypes.indexOf(eventType) !== -1;
    }
}
exports.ImmediateSendingStrategy = ImmediateSendingStrategy;
//# sourceMappingURL=ImmediateSendingStrategy.js.map