"use strict";
/*
 * Copyright 2019 Dynatrace LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunicationStateImpl = void 0;
const api_1 = require("../../api");
const PlatformConstants_1 = require("../PlatformConstants");
const defaultMaxBeaconSize = 30720; // 30 * 1024
const defaultMultiplicity = 1;
const defaultCaptureErrors = api_1.CaptureMode.On;
const defaultCrashReportingMode = api_1.CaptureMode.On;
class CommunicationStateImpl {
    constructor() {
        this.serverId = PlatformConstants_1.defaultServerId;
        this.maxBeaconSize = defaultMaxBeaconSize;
        this.multiplicity = defaultMultiplicity;
        this.captureCrashes = defaultCrashReportingMode;
        this.captureErrors = defaultCaptureErrors;
        this.capture = api_1.CaptureMode.On;
        this.serverIdLocked = false;
    }
    setServerIdLocked() {
        this.serverIdLocked = true;
    }
    disableCapture() {
        this.capture = api_1.CaptureMode.Off;
    }
    updateFromResponse(response) {
        // Check validity
        if (response.valid === false ||
            response.captureMode === api_1.CaptureMode.Off) {
            this.disableCapture();
            return;
        }
        // Multiplicity
        if (response.multiplicity !== undefined) {
            if (response.multiplicity <= 0) {
                this.disableCapture();
            }
            else {
                this.multiplicity = response.multiplicity;
            }
        }
        // Server id
        if (response.serverId !== undefined && this.serverIdLocked === false) {
            this.serverId =
                response.serverId >= 0 ? response.serverId : PlatformConstants_1.defaultServerId;
        }
        // Max beacon size
        if (response.maxBeaconSizeInKb !== undefined) {
            this.maxBeaconSize =
                response.maxBeaconSizeInKb >= 0
                    ? response.maxBeaconSizeInKb * 1024
                    : defaultMaxBeaconSize;
        }
        // Capture Errors
        if (response.captureErrors !== undefined) {
            this.captureErrors = response.captureErrors;
        }
        // Crash reporting level
        if (response.captureCrashes !== undefined) {
            this.captureCrashes = response.captureCrashes;
        }
    }
    setServerId(id) {
        if (!this.serverIdLocked) {
            this.serverId = id;
        }
    }
}
exports.CommunicationStateImpl = CommunicationStateImpl;
//# sourceMappingURL=CommunicationStateImpl.js.map