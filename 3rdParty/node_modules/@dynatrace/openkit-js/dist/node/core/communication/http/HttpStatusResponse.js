"use strict";
/*
 * Copyright 2019 Dynatrace LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpStatusResponse = void 0;
const api_1 = require("../../../api");
const PayloadDecoder_1 = require("../../utils/PayloadDecoder");
const parsePositiveInt = (str, defaultValue) => {
    const parsed = parseInt(str, 10);
    return parsed >= 0 ? parsed : defaultValue;
};
class HttpStatusResponse {
    constructor(response, loggerFactory) {
        this.valid = true;
        this.logger = loggerFactory.createLogger('HttpStatusResponse');
        if (response.status !== 200) {
            this.valid = false;
            this.logger.debug('Invalid response status:', response.status);
            return;
        }
        const entries = new PayloadDecoder_1.PayloadDecoder(response.payload).getEntries();
        if (entries.type !== 'm') {
            this.valid = false;
            this.logger.debug('Invalid response type:', entries.type);
            return;
        }
        this.decodeEntries(entries);
    }
    decodeEntries(entries) {
        Object.keys(entries).forEach((key) => this.decodeEntry(key, entries[key]));
    }
    decodeEntry(key, value) {
        switch (key) {
            case "cp" /* Capture */:
                // 1 is on, 0 is off. If another value is passed, we disable it to be on the safe side.
                this.captureMode =
                    value === '1' ? api_1.CaptureMode.On : api_1.CaptureMode.Off;
                break;
            case "cr" /* CaptureCrashes */:
                // 1 (always on) and 2 (only on WiFi) are treated the same
                this.captureCrashes =
                    value === '1' ? api_1.CaptureMode.On : api_1.CaptureMode.Off;
                break;
            case "er" /* CaptureErrors */:
                // 1 (always on) and 2 (only on WiFi) are treated the same
                this.captureErrors =
                    value === '1' ? api_1.CaptureMode.On : api_1.CaptureMode.Off;
                break;
            case "bl" /* MaxBeaconSize */:
                this.maxBeaconSizeInKb = parsePositiveInt(value, 0);
                break;
            case "mp" /* Multiplicity */:
                this.multiplicity = parsePositiveInt(value, 0);
                break;
            case "id" /* ServerId */:
                this.serverId = parsePositiveInt(value, 1);
                break;
        }
    }
}
exports.HttpStatusResponse = HttpStatusResponse;
//# sourceMappingURL=HttpStatusResponse.js.map