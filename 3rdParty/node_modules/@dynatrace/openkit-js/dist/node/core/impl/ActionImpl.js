"use strict";
/*
 * Copyright 2019 Dynatrace LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionImpl = void 0;
const LoggingUtils_1 = require("../logging/LoggingUtils");
const Utils_1 = require("../utils/Utils");
const NullWebRequestTracer_1 = require("./null/NullWebRequestTracer");
const WebRequestTracerImpl_1 = require("./WebRequestTracerImpl");
class ActionImpl {
    constructor(name, startTime, session, payloadBuilder, config) {
        this.name = name;
        this.startTime = startTime;
        this.session = session;
        this.payloadBuilder = payloadBuilder;
        this.config = config;
        this._endTime = -1;
        this.startSequenceNumber = this.payloadBuilder.createSequenceNumber();
        this.actionId = this.payloadBuilder.createActionId();
        this.logger = config.loggerFactory.createLogger(`ActionImpl (sessionId=${session.sessionId}, actionId=${this.actionId})`);
        this.logger.debug('created', { name });
    }
    get endTime() {
        return this._endTime;
    }
    /**
     * @inheritDoc
     */
    reportValue(name, value) {
        if (this.isActionLeft() ||
            this.config.dataCollectionLevel !== 2 /* UserBehavior */) {
            return;
        }
        if (typeof name !== 'string' || name.length === 0) {
            LoggingUtils_1.validationFailed(this.logger, 'reportValue', 'Name must be a non empty string', { name });
            return;
        }
        const type = typeof value;
        if (type !== 'string' &&
            type !== 'number' &&
            value !== null &&
            value !== undefined) {
            LoggingUtils_1.validationFailed(this.logger, 'reportValue', 'Value is not a valid type', { value });
            return;
        }
        this.logger.debug('reportValue', { name, value });
        this.payloadBuilder.reportValue(this, name, value);
    }
    /**
     * @inheritDoc
     */
    reportEvent(name) {
        if (this.isActionLeft() ||
            this.config.dataCollectionLevel !== 2 /* UserBehavior */) {
            return;
        }
        if (typeof name !== 'string' || name.length === 0) {
            LoggingUtils_1.validationFailed(this.logger, 'reportEvent', 'Name must be a non empty string', { name });
            return;
        }
        this.logger.debug('reportEvent', { name });
        this.payloadBuilder.reportEvent(this.actionId, name);
    }
    /**
     * @inheritDoc
     */
    reportError(name, code, message) {
        if (this.isActionLeft()) {
            LoggingUtils_1.validationFailed(this.logger, 'reportError', 'Action is already closed');
            return;
        }
        if (typeof name !== 'string' || name.length === 0) {
            LoggingUtils_1.validationFailed(this.logger, 'reportError', 'Name must be a non empty string', { name });
            return;
        }
        if (!Utils_1.isFinite(code)) {
            LoggingUtils_1.validationFailed(this.logger, 'reportError', 'Code must be a finite number', { code });
            return;
        }
        this.logger.debug('reportError', { name, code, message });
        this.payloadBuilder.reportError(this.actionId, name, code, String(message));
    }
    traceWebRequest(url) {
        if (this.isActionLeft()) {
            LoggingUtils_1.validationFailed(this.logger, 'traceWebRequest', 'Action is already closed');
            return NullWebRequestTracer_1.defaultNullWebRequestTracer;
        }
        if (typeof url !== 'string' || url.length === 0) {
            LoggingUtils_1.validationFailed(this.logger, 'traceWebRequest', 'Url must be a non empty string', { url });
            return NullWebRequestTracer_1.defaultNullWebRequestTracer;
        }
        this.logger.debug('traceWebRequest', { url });
        const { deviceId, applicationId, loggerFactory } = this.config;
        return new WebRequestTracerImpl_1.WebRequestTracerImpl(this.payloadBuilder, this.actionId, url, loggerFactory, deviceId, applicationId, this.session.sessionId);
    }
    leaveAction() {
        if (this.isActionLeft()) {
            return null;
        }
        this.endSequenceNumber = this.payloadBuilder.createSequenceNumber();
        this._endTime = this.payloadBuilder.currentTimestamp();
        this.payloadBuilder.addAction(this);
        this.session._endAction(this);
        this.logger.debug('leaveAction');
        return null;
    }
    isActionLeft() {
        return this._endTime !== -1;
    }
}
exports.ActionImpl = ActionImpl;
//# sourceMappingURL=ActionImpl.js.map