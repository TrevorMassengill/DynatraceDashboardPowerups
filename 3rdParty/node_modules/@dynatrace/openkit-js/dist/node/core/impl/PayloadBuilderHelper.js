"use strict";
/*
 * Copyright 2019 Dynatrace LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayloadBuilderHelper = void 0;
const SequenceIdProvider_1 = require("../provider/SequenceIdProvider");
const TimestampProvider_1 = require("../provider/TimestampProvider");
/**
 * Responsible for creating and holding all payload data for a session.
 */
class PayloadBuilderHelper {
    constructor(payloadBuilder, sessionStartTime, timestampProvider = TimestampProvider_1.defaultTimestampProvider) {
        this.payloadBuilder = payloadBuilder;
        this.sessionStartTime = sessionStartTime;
        this.timestampProvider = timestampProvider;
        this.sequenceId = new SequenceIdProvider_1.SequenceIdProvider();
        this.nextId = new SequenceIdProvider_1.SequenceIdProvider();
    }
    createActionId() {
        return this.nextId.next();
    }
    createSequenceNumber() {
        return this.sequenceId.next();
    }
    startSession() {
        this.payloadBuilder.startSession(this.createSequenceNumber());
    }
    endSession() {
        this.payloadBuilder.endSession(this.createSequenceNumber(), this.timeSinceSessionStart());
    }
    addAction(action) {
        if (action.endSequenceNumber === undefined) {
            return;
        }
        this.payloadBuilder.action(action.name, action.actionId, action.startSequenceNumber, action.endSequenceNumber, action.startTime - this.sessionStartTime, action.endTime - action.startTime);
    }
    reportValue(action, name, value) {
        this.payloadBuilder.reportValue(name, value, action.actionId, this.createSequenceNumber(), this.timeSinceSessionStart());
    }
    identifyUser(userTag) {
        this.payloadBuilder.identifyUser(userTag, this.createSequenceNumber(), this.timeSinceSessionStart());
    }
    reportError(parentActionId, name, code, message) {
        this.payloadBuilder.reportError(name, message, code, parentActionId, this.createSequenceNumber(), this.timeSinceSessionStart());
    }
    reportCrash(errorName, reason, stacktrace) {
        this.payloadBuilder.reportCrash(errorName, reason, stacktrace, this.createSequenceNumber(), this.timeSinceSessionStart());
    }
    reportEvent(actionId, name) {
        this.payloadBuilder.reportNamedEvent(name, actionId, this.createSequenceNumber(), this.timeSinceSessionStart());
    }
    currentTimestamp() {
        return this.timestampProvider.getCurrentTimestamp();
    }
    addWebRequest(webRequest, parentActionId) {
        this.payloadBuilder.webRequest(webRequest.getUrl(), parentActionId, webRequest.getStartSequenceNumber(), webRequest.getStart() - this.sessionStartTime, webRequest.getEndSequenceNumber(), webRequest.getDuration(), webRequest.getBytesSent(), webRequest.getBytesReceived(), webRequest.getResponseCode());
    }
    getWebRequestTracerTag(actionId, sessionNumber, sequenceNumber, deviceId, appId) {
        return this.payloadBuilder.getWebRequestTracerTag(actionId, sessionNumber, sequenceNumber, deviceId, appId);
    }
    timeSinceSessionStart() {
        return this.currentTimestamp() - this.sessionStartTime;
    }
}
exports.PayloadBuilderHelper = PayloadBuilderHelper;
//# sourceMappingURL=PayloadBuilderHelper.js.map