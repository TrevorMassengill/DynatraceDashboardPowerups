"use strict";
/*
 * Copyright 2019 Dynatrace LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebRequestTracerImpl = exports.createTag = void 0;
const LoggingUtils_1 = require("../logging/LoggingUtils");
const PlatformConstants_1 = require("../PlatformConstants");
const tagPrefix = 'MT';
// We do not need to percent encode, because the device id and application id are only [0-9a-fA-F-]
exports.createTag = (actionId, sessionNumber, sequenceNumber, serverId, deviceId, appId) => [
    tagPrefix,
    PlatformConstants_1.protocolVersion,
    serverId,
    deviceId,
    sessionNumber,
    appId,
    actionId,
    1,
    sequenceNumber,
].join('_');
class WebRequestTracerImpl {
    constructor(payload, actionId, url, logFactory, deviceId, appId, sessionNumber) {
        this.endSequenceNumber = -1;
        this.endTime = -1;
        this.responseCode = -1;
        this.bytesSent = -1;
        this.bytesReceived = -1;
        this.payload = payload;
        this.parentActionId = actionId;
        this.url = url;
        // creating start sequence number has to be done here, because it's needed for the creation of the tag
        this.startSequenceNumber = payload.createSequenceNumber();
        this.logger = logFactory.createLogger(`WebRequestTracerImpl (sessionId=${sessionNumber}, startSequence=${this.startSequenceNumber})`);
        // if start is not called before using the setters the start time (e.g. load time) is not in 1970
        this.startTime = payload.currentTimestamp();
        this.tag = payload.getWebRequestTracerTag(actionId, sessionNumber, this.startSequenceNumber, deviceId, appId);
        this.logger.debug('create');
    }
    getTag() {
        this.logger.debug('getTag', { tag: this.tag });
        return this.tag;
    }
    setBytesReceived(bytesReceived) {
        if (!isFinite(bytesReceived) || bytesReceived < 0) {
            LoggingUtils_1.validationFailed(this.logger, 'setBytesReceived', 'bytes must be a positive finite number', { bytesReceived });
        }
        else if (this.isStopped()) {
            LoggingUtils_1.validationFailed(this.logger, 'setBytesReceived', 'webrequest is already stopped');
        }
        else {
            this.logger.debug('setBytesReceived', { bytesReceived });
            this.bytesReceived = bytesReceived;
        }
        return this;
    }
    setBytesSent(bytesSent) {
        if (!isFinite(bytesSent) || bytesSent < 0) {
            LoggingUtils_1.validationFailed(this.logger, 'setBytesSent', 'bytes must be a positive finite number', { bytesSent });
        }
        else if (this.isStopped()) {
            LoggingUtils_1.validationFailed(this.logger, 'setBytesSent', 'webrequest is already stopped');
        }
        else {
            this.logger.debug('setBytesSent', { bytesSent });
            this.bytesSent = bytesSent;
        }
        return this;
    }
    start() {
        if (this.isStopped()) {
            LoggingUtils_1.validationFailed(this.logger, 'setBytesSent', 'webrequest is already stopped');
        }
        else {
            this.logger.debug('start');
            this.startTime = this.payload.currentTimestamp();
        }
        return this;
    }
    stop(responseCode) {
        if (this.isStopped()) {
            LoggingUtils_1.validationFailed(this.logger, 'setBytesSent', 'webrequest is already stopped');
            return;
        }
        if (responseCode !== undefined) {
            this.responseCode = responseCode;
        }
        this.endTime = this.payload.currentTimestamp();
        this.endSequenceNumber = this.payload.createSequenceNumber();
        this.logger.debug('stop', { duration: this.endTime - this.startTime });
        this.payload.addWebRequest(this, this.parentActionId);
    }
    getUrl() {
        return this.url;
    }
    getDuration() {
        if (!this.isStopped()) {
            return -1;
        }
        return this.endTime - this.startTime;
    }
    getStart() {
        return this.startTime;
    }
    getResponseCode() {
        return this.responseCode;
    }
    getBytesReceived() {
        return this.bytesReceived;
    }
    getBytesSent() {
        return this.bytesSent;
    }
    getEndSequenceNumber() {
        return this.endSequenceNumber;
    }
    getStartSequenceNumber() {
        return this.startSequenceNumber;
    }
    isStopped() {
        return this.endTime !== -1;
    }
}
exports.WebRequestTracerImpl = WebRequestTracerImpl;
//# sourceMappingURL=WebRequestTracerImpl.js.map